{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Session","result":{"pageContext":{"currentCategory":"Session","categories":["All","OS","Memory","Paging","TIL","Spring-Security","Spring-Boot","Jwt","Login","Algorithm","DP","2D-Array-DP","Segment-Tree","Divide&Conquer","Blog","Java","BitMasking","BFS","DFS","Implementation","Geometry","Disjoin-Set","Union-Find","Set","Kruskal","Line-Sweeping","Greedy","Bitwise-Operation","Palindrome","Network","TCP","CIA","RSA","JWT","OSI-7계층","UDP","Session","Brute-Force","Combination","Data-Structure","Two-Pointer","Simulation","Math"],"edges":[{"node":{"id":"9cf89c1a-d082-5d6d-aeea-11ba4ba4a07c","excerpt":"Session Login  해당 내용은 메타코딩 - 스프링부트 시큐리티 강의를 들으며 정리한 내용입니다.\n JWT(Json Web Token)을 살펴보기 전에 왜 JWT를 쓰고 어디에 사용되는지 확인하기 위해 먼저 Session Login을 알아보고 어떤 문제점들이 있는지 확인해보자. 우선 서버 Session은 Client가 최초 접근시 서버의 Session ID 목록을 관리하는 곳에 자동으로 해당 브라우저에 대한 세션 ID를 생성해 관리하게 된다. 생성된 Session ID를 html 반환시 헤더(쿠키)에 담아 전달하고 이후 두 번째 접근부터는 이 세션 ID가 포함된 요청이 서버로 들어오게 된다. 💥 Session을 왜 사용할까? 이러한 특징을 Stateful 이라고 한다.  Session 기반 Login 세션 기반 로그인을 그림을 통해 확인해 본다.  \n 3️⃣-4️⃣ : 생성된 세션 ID를 쿠키에 담아 클라이언트에게 전달하고 클라이언트는 이 세션 ID를 저장해둔다.  5️⃣-7️⃣ : Lo…","fields":{"slug":"/session-login/"},"frontmatter":{"categories":"JWT Session Login TIL","title":"Session Login - JWT 로그인에 앞선 Session Login","date":"May 11, 2022"}},"next":{"fields":{"slug":"/swea-10805-야바위/"}},"previous":{"fields":{"slug":"/tcp-udp/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}