{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/DP","result":{"pageContext":{"currentCategory":"DP","categories":["All","OS","Memory","Paging","TIL","Spring-Security","Spring-Boot","Jwt","Login","Algorithm","DP","2D-Array-DP","Segment-Tree","Divide&Conquer","Blog","Java","BitMasking","BFS","DFS","Implementation","Geometry","Disjoin-Set","Union-Find","Set","Kruskal","Line-Sweeping","Greedy","Bitwise-Operation","Palindrome","Network","TCP","CIA","RSA","JWT","OSI-7계층","UDP","Session","Brute-Force","Combination","Data-Structure","Two-Pointer","Simulation","Math"],"edges":[{"node":{"id":"7bdc0550-064a-51e5-87e0-4ab0d6f83275","excerpt":"Kakao Blind 2022 - 파괴되지 않은 건물 Level Ⅲ  Kakao Blind 2022 - 파괴되지 않은 건물  문제  2차원 배열에서 특정 구간에 덧셈, 뺄셈을 진행하고 이를 효율적으로 시간 단축하는 문제입니다.   입력     출력  단순히 더하고 빼는 연산을  에 해결하더라도 정확도는 쉽게 100% 맞출 수 있습니다. 하지만, 이 문제는 효율성 문제로 시간 복잡도를 줄여야 합니다.   🍺 How to Solve?  🔥 Key Point 어떻게 하면 구간에 대해서 더하고, 빼는 연산을 매번 하지 않고 한 번에 할 수 있을까?? 🎯 2차원 배열에서 누적합을 이용한다.  5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 위 상황에서 (3,3) 부터 (5,5) 까지 -4 만큼 적용한다면?    모든 구간에 적용할 필요 없이 각 사각형의 오른쪽 아래 끝 좌표에만 기록을 한다면\n\n(0,0) 부터 해당 구간까지에는 x만큼 적용하겠다는 의…","fields":{"slug":"/KakaoBlind-2022-파괴되지않은건물/"},"frontmatter":{"categories":"Algorithm DP 2D-Array-DP","title":"Kakao Blind 2022 - 파괴되지 않은 건물 [Kakao Blind 문제 - DP, 2D Array DP]","date":"October 13, 2022"}},"next":{"fields":{"slug":"/boj-2632-피자판매/"}},"previous":{"fields":{"slug":"/securityjwtlogin-0/"}}},{"node":{"id":"258aee53-2060-5c5d-a186-ea43ce3a7348","excerpt":"BOJ 2632 - 피자 판매 Gold Ⅱ  BOJ 2632 - 피자 판매  문제  고객이 두 종류의 피자 A와 B를 취급하는 피자가게에서 피자를 주문하고자 한다. <그림 1>과 같이 각 종류의 피자는 다양한 크기의 여러 개의 피자조각으로 나누어져 있다. 각 조각에 쓰여진 숫자는 피자조각의 크기를 나타낸다. 그림1 고객이 원하는 피자의 크기를 이야기하면, 피자가게에서는 한 종류의 피자를 2 조각 이상 판매할 때는 반드시 연속된 조각들을 잘라서 판매한다. 이때 판매한 피자조각의 크기 합이 주문한 크기가 되어야 한다. 판매한 피자조각은 모두 A종류이거나, 모두 B종류이거나, 또는 A와 B 종류가 혼합될 수 있다. 예를 들어서, <그림 1> 과 같이 잘라진 피자가 있을 때, 손님이 전체 크기가 7 인 피자를 주문하면, 피자 가게에서는 <그림2>와 같이 5 가지 방법으로 피자를 판매할 수 있다. 그림2 피자가게에서 손님이 원하는 크기의 피자를 판매하는 모든 방법의 가지 수를 계산하는 프로…","fields":{"slug":"/boj-2632-피자판매/"},"frontmatter":{"categories":"Algorithm DP Segment-Tree","title":"BOJ 2632 - 피자 판매 [BOJ 문제 - DP, Segment Tree]","date":"October 13, 2022"}},"next":{"fields":{"slug":"/boj-2263-트리의순회/"}},"previous":{"fields":{"slug":"/KakaoBlind-2022-파괴되지않은건물/"}}},{"node":{"id":"dbb0135d-a24b-5e45-a050-9bef443a4a48","excerpt":"BOJ 1102 - 발전소 Gold-Ⅰ  이 문제는 BOJ 문제입니다. 문제 출처 : 발전소  💥 문제 \n은진이는 발전소에서 근무한다. 은진이가 회사에서 잠깐 잘 때마다, 몇몇 발전소가 고장이난다. 게다가, 지금 은진이의 보스 형택이가 은진이의 사무실로 걸어오고 있다. 만약 은진이가 형택이가 들어오기 전까지 발전소를 고쳐놓지 못한다면, 은진이는 해고당할 것이다. \n발전소를 고치는 방법은 간단하다. 고장나지 않은 발전소를 이용해서 고장난 발전소를 재시작하면 된다. 하지만, 이때 비용이 발생한다. 이 비용은 어떤 발전소에서 어떤 발전소를 재시작하느냐에 따라 다르다. \n적어도 P개의 발전소가 고장나 있지 않도록, 발전소를 고치는 비용의 최솟값을 구하는 프로그램을 작성하시오.  입력  첫째 줄에 발전소의 개수 N이 주어진다. N은 16보다 작거나 같은 자연수이다. \n둘째 줄부터 N개의 줄에는 발전소 i를 이용해서 발전소 j를 재시작할 때 드는 비용이 주어진다. \ni줄의 j번째 값이 그 값…","fields":{"slug":"/boj-1102-발전소/"},"frontmatter":{"categories":"Algorithm BitMasking DP BFS DFS","title":"BOJ 1102 - 발전소 [BOJ 문제 - BitMasking, DP, BFS, DFS]","date":"June 08, 2022"}},"next":{"fields":{"slug":"/boj-1194-달이차오른다가자/"}},"previous":{"fields":{"slug":"/start-java/"}}},{"node":{"id":"2af0eb8d-044d-5672-a71f-393e0812d915","excerpt":"SWEA 4699 - 콩순이의 가장 싼 팰린드롬 D-Ⅳ  이 문제는 SWEA 문제입니다. 문제 출처 : 콩순이의 가장 싼 팰린드롬  Palindrome 이란? 팰린드롬이란 문자열, DP 문제에서 종종 접할 수 있는 문제이다. 팰린드롬을 가장 쉽게 표현하자면 거꾸로 해도 똑같은 문자라고 할 수 있다. 예를 들어, ABBA 와 같이 거꾸로 해도 똑같은 문자를 의미한다.\n How to Solve?  처음에는 문자를 제거하고 삽입하는 모든 경우를 탐색하면서 팰린드롬이 완성됐다면 Cost 값을 저장해두고 해당 Cost보다 큰 경우는 바로 탐색 종료하는 방식의 BackTracking 방식으로 구현했다.  하지만 이 문제의 Stack 메모리 제한이 있기에 재귀로 해결하기 어렵다. 따라서 다른 방식의 접근이 필요하다. 앞서 Palindrome을 설명하면서 DP에서 자주 나온다고 설명했다. 따라서 이 문제에서도 DP를 활용한 접근 방법을 알아본다.  🔥 DP  핵심은 가장 인접한 두 글자부터 팰린…","fields":{"slug":"/swea-4699-콩순이의 가장 싼 팰린드롬/"},"frontmatter":{"categories":"Algorithm Palindrome DP","title":"SWEA 4699 - 콩순이의 가장 싼 팰린드롬 [SWEA 문제 - 팰린드롬, DP]","date":"May 15, 2022"}},"next":{"fields":{"slug":"/cia-rsa/"}},"previous":{"fields":{"slug":"/swea-10762-사탕나누기/"}}},{"node":{"id":"acbef66e-b5ed-5058-8f8c-608e15079263","excerpt":"TCP VS UDP  💥 TCP - Transmission Control Protocol 우선 간단한 그림을 통해 TCP의 데이터 송신 과정을 살펴보자.\n   ✔ ACK(확인 신호)를 응답받아야 다음 메세지를 전송하고 응답을 받지 못하면 재전송을 한다. 이러한 특징때문에 신뢰성 이 높지만 속도가 비교적 느리다. TCP 특징 1️⃣ : 연결형 서비스 3-Way Handshaking 과정을 통해 연결한다. 4-Way Handshaking 과정을 통해 연결을 해제한다. 3-Way Handshaking   1️⃣ : Client가 서버에 접속을 요청하는 SYN 패킷을 전송한다. \n2️⃣ : 서버는 Client에게 SYN 요청을 받고 Client에게 요청을 수락하는 ACK 와 SYN flag가 설정된 패킷을 전송한다. Client가 다시 ACK을 응답하기를 기다린다. \n3️⃣ : Client는 서버에게 ACK 응답을 전송하고 연결이 서로 이루어진다. 이후 데이터가 오고 간다.\n 4-Way Handshak…","fields":{"slug":"/tcp-udp/"},"frontmatter":{"categories":"Network TCP UDP TIL","title":"TCP/UDP 통신 [통신 - TCP/UDP]","date":"May 12, 2022"}},"next":{"fields":{"slug":"/session-login/"}},"previous":{"fields":{"slug":"/osi7Layer/"}}},{"node":{"id":"5546081f-4cb7-5c9b-9807-da6ef8fee882","excerpt":"SWEA 10805 - 야바위 D-Ⅳ \n이 문제는 SW Expert Academy 문제입니다. SWEA 10805 - 야바위  문제  동호는 공과 N개의 컵을 가지고 야바위를 하고 있다. N개의 컵은 모두 구별이 가능하고, 일렬로 늘어서 있다. 처음에 왼쪽에서 첫 번째 컵에 공을 넣어놓는다. 그리고 앞으로 Q번 두 컵의 위치를 바꾸는데, i번째에는 왼쪽에서 Ai번째 컵과 왼쪽에서 Bi번째 컵의 위치를 바꾼다. 동호는 공이 어떤 컵에 있는지 맞출 수 없도록 하기 위해 정확히 한 번 속임수를 쓰려고 한다. 속임수는 현재 공이 들어있는 컵이 왼쪽에서 i번째 컵이라고 할 때, 왼쪽에서 i-1번째 컵이나 왼쪽에서 i+1번째 컵으로 공을 순간 이동시키는 것이다. 이 속임수는 컵을 섞는 도중이 아니라면, 어떤 시점에도 가능하다.  입력 \n첫 번째 줄에 테스트 케이스의 수 T가 주어진다. 각 테스트 케이스의 첫 번째 줄에는 두 정수 N,Q (1 ≤ N, Q ≤ 105)가 공백 하나로 구분되어 주…","fields":{"slug":"/swea-10805-야바위/"},"frontmatter":{"categories":"Algorithm DP","title":"SWEA 10805 - 야바위 [Algorithm, DP]","date":"April 30, 2022"}},"next":{"fields":{"slug":"/boj-1941-소문난칠공주/"}},"previous":{"fields":{"slug":"/session-login/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}